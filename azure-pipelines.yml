# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

variables:
  - name: agentPool
    value: AWS Linux
  - name: dockerImage
    value: personal-website
  - name: dockerImageTag
    value: latest
  - name: dockerUserName
    value: majki741
  - name: azureContainerWebAppName
    value: personal-website-mgr-ms
  - name: azureWebAppName
    value: angular-personal-website-mgr-ms
  - name: azureSubscriptionId
    value: 1d8c6de3-acbf-4ebc-ba89-85dc78fe1436
  - name: azureLocation
    value: West Europe
  - name: resourceGroup
    value: RG_MGR
  - name: VM_Name
    value: DebianMGR
pool:
  name: $(AGENTPOOL)


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    pool:
      name: $(AGENTPOOL)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '16.x'
      displayName: 'Install Node.js 16.x'
    - script: | 
        npm install -g @angular/cli
        npm install
        ng build --prod
      displayName: 'npm install and build'
    
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/dist/witryna-osobista/'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/personal-website.zip
        replaceExistingArchive: true
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/personal-website.zip'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Build_Docker
  displayName: Build and push docker image
  jobs:
  - job: Build_and_push
    pool:
      name: $(AGENTPOOL)
    steps:
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        containerRegistry: 'DockerHub'
        repository: '$(DOCKERUSERNAME)/$(DOCKERIMAGE)'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: '$(DOCKERIMAGETAG)'
    - task: Docker@2
      displayName: 'Push Docker Image'
      inputs:
        containerRegistry: 'DockerHub'
        repository: '$(DOCKERUSERNAME)/$(DOCKERIMAGE)'
        command: 'push'
        tags: '$(DOCKERIMAGETAG)'
    
- stage: Deploy_WebApp
  displayName: Deploy docker to azure webapp
  jobs:
  - job: Deploy_WebApp
    pool:
      name: $(AGENTPOOL)
    steps:
    - task: AzureResourceManagerTemplateDeployment@3
      displayName: ARM deployment
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: 'Azure_RM_RG_MGR'
        subscriptionId: '$(azureSubscriptionId)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(RESOURCEGROUP)'
        location: '$(azureLocation)'
        templateLocation: 'Linked artifact'
        csmFile: 'provisioning/template.json'
        csmParametersFile: 'provisioning/parameters.json'
        deploymentMode: 'Incremental'
    - task: AzureAppServiceManage@0
      displayName: Start WebApp
      inputs:
        azureSubscription: 'Azure_RM_RG_MGR'
        ResourceGroupName: '$(RESOURCEGROUP)'
        Action: 'Start Azure App Service'
        WebAppName: '$(azureContainerWebAppName)'
    - task: AzureWebAppContainer@1
      displayName: 'Deploy Azure WebApp Container'
      retryCountOnTaskFailure: 2
      inputs:
        azureSubscription: 'Azure_RM_RG_MGR'
        resourceGroupName: '$(RESOURCEGROUP)'
        appName: '$(azureContainerWebAppName)'
        containers: '$(DOCKERUSERNAME)/$(DOCKERIMAGE):$(DOCKERIMAGETAG)'
- stage: Deploy_VM
  displayName: Deploy app to VM
  jobs:
  - job: Deploy_App_to_VM
    pool:
      name: $(AGENTPOOL)
    steps:
      - task: Bash@3
        displayName: Install Azure-CLI
        inputs:
          targetType: 'inline'
          script: |
            sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
            sudo dnf install -y https://packages.microsoft.com/config/rhel/8/packages-microsoft-prod.rpm
            sudo dnf install -y https://packages.microsoft.com/config/rhel/9.0/packages-microsoft-prod.rpm
            sudo dnf install -y azure-cli
      - task: AzureCLI@2
        displayName: Install nginx
        inputs:
          azureSubscription: 'Azure_RM_RG_MGR'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az vm run-command invoke \
               -g $(RESOURCEGROUP) \
               -n $(VM_NAME) \
               --command-id RunShellScript \
               --scripts "sudo apt-get update && sudo apt-get install -y nginx && sudo apt-get install -y zip"
      - task: AzureCLI@2
        displayName: Open port 80/TCP
        inputs:
          azureSubscription: 'Azure_RM_RG_MGR'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: 'az vm open-port --port 80 --resource-group $(RESOURCEGROUP) --name $(VM_NAME)'
      - download: current
        artifact: drop
      - task: CopyFilesOverSSH@0
        displayName: Copy artifact
        inputs:
          sshEndpoint: 'AzureVM_SSH'
          sourceFolder: '$(Pipeline.Workspace)/drop/'
          contents: '**'
          targetFolder: '/home/azureuser'
          readyTimeout: '20000'
      - task: AzureCLI@2
        displayName: Deploy artifact
        inputs:
          azureSubscription: 'Azure_RM_RG_MGR'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az vm run-command invoke \
              -g $(RESOURCEGROUP) \
              -n $(VM_NAME) \
              --command-id RunShellScript \
              --scripts "mkdir /home/azureuser/personal-website && sudo cp /home/azureuser/personal-website.zip /home/azureuser/personal-website && sudo unzip /home/azureuser/personal-website/personal-website.zip && sudo rm /home/azureuser/personal-website/personal-website.zip --force && sudo rm /var/www/html/* --force -r && sudo cp -R /home/azureuser/personal-website/* /var/www/html/ && sudo systemctl restart nginx" 
- stage: Deploy_Artifact_WebApp
  displayName: Deploy artifact to Web App
  jobs:
    - job: Deploy_Artifact_WebApp
      pool: 
        name: $(AGENTPOOL)
      steps:
      - task: AzureAppServiceManage@0
        displayName: Start WebApp
        inputs:
          azureSubscription: 'Azure_RM_RG_MGR'
          ResourceGroupName: '$(RESOURCEGROUP)'
          Action: 'Start Azure App Service'
          WebAppName: '$(azureWebAppName)'
      - task: AzureCLI@2
        displayName: Configure WebApp
        inputs:
          azureSubscription: 'Azure_RM_RG_MGR'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: 'az webapp config set -g $(RESOURCEGROUP) -n $(azureWebAppName) --startup-file="pm2 serve /home/site/wwwroot --no-daemon --spa"'
      - download: current
        artifact: drop
      - task: AzureWebApp@1
        displayName: Deploy Artifact to WebApp
        inputs:
          azureSubscription: 'Azure_RM_RG_MGR'
          appType: 'webAppLinux'
          appName: '$(azureWebAppName)'
          package: '$(Pipeline.Workspace)/**/*.zip'
          runtimeStack: 'NODE|16-lts'