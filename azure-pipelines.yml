# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

pool:
  name: 'AWS Linux'
variables:
  npm_config_cache: $(Pipeline.Workspace)/.npm

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    pool:
      name: 'AWS Linux'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '16.x'
      displayName: 'Install Node.js 16.x'
    - script: | 
        npm install -g @angular/cli
        npm install
        ng build --prod
      displayName: 'npm install and build'
    
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/dist/witryna-osobista/'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Build_Docker
  displayName: Build and push docker image
  jobs:
  - job: Build_and_push
    pool:
      name: 'AWS Linux'
    steps:
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'majki741/personal-website'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: 'latest'
    - task: Docker@2
      displayName: 'Push Docker Image'
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'majki741/personal-website'
        command: 'push'
        tags: 'latest'
    
- stage: Deploy_WebApp
  displayName: Deploy docker to azure webapp
  jobs:
  - job: Deploy_WebApp
    pool:
      name: 'AWS Linux'
    steps:
    - task: AzureResourceManagerTemplateDeployment@3
      displayName: ARM deployment
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: 'Azure_RM_RG_MGR'
        subscriptionId: '1d8c6de3-acbf-4ebc-ba89-85dc78fe1436'
        action: 'Create Or Update Resource Group'
        resourceGroupName: 'RG_MGR'
        location: 'West Europe'
        templateLocation: 'Linked artifact'
        csmFile: 'provisioning/template.json'
        csmParametersFile: 'provisioning/parameters.json'
        deploymentMode: 'Incremental'
    - task: AzureAppServiceManage@0
      inputs:
        azureSubscription: 'Azure_RM_RG_MGR'
        ResourceGroupName: 'RG_MGR'
        Action: 'Start Azure App Service'
        WebAppName: 'personal-website-mgr-ms'
    - task: AzureWebAppContainer@1
      displayName: 'Deploy Azure WebApp Container'
      retryCountOnTaskFailure: 2
      inputs:
        azureSubscription: 'Azure_RM_RG_MGR'
        resourceGroupName: 'RG_MGR'
        appName: 'personal-website-mgr-ms'
        containers: 'majki741/personal-website:latest'
- stage: Deploy_VM
  displayName: Deploy app to VM
  jobs:
  - job: Deploy_App_to_VM
    pool:
      name: 'AWS Linux'
    steps:
      - task: Bash@3
        displayName: Install Azure-CLI
        inputs:
          targetType: 'inline'
          script: |
            #!/bin/bash
            AzureCli=`az --help`
            if [[ "$AzureCli" == *"command not found"* ]] 
              then
              sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
              sudo dnf install -y https://packages.microsoft.com/config/rhel/8/packages-microsoft-prod.rpm
              sudo dnf install -y https://packages.microsoft.com/config/rhel/9.0/packages-microsoft-prod.rpm
              sudo dnf install azure-cli
            else
              echo "OK"
            fi
      - task: AzureCLI@2
        displayName: Install nginx
        inputs:
          azureSubscription: 'Azure_RM_RG_MGR'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az vm run-command invoke \
               -g $(RESOURCEGROUP) \
               -n $(VM_NAME) \
               --command-id RunShellScript \
               --scripts "sudo apt-get update && sudo apt-get install -y nginx"
      - task: AzureCLI@2
        displayName: Open port 80/TCP
        inputs:
          azureSubscription: 'Azure_RM_RG_MGR'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: 'az vm open-port --port 80 --resource-group $(RESOURCEGROUP) --name $(VM_NAME)'